// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/aerosystems/mail-service/internal/config"
	"github.com/aerosystems/mail-service/internal/infrastructure/http"
	"github.com/aerosystems/mail-service/internal/infrastructure/http/handlers"
	"github.com/aerosystems/mail-service/internal/infrastructure/rpc"
	"github.com/aerosystems/mail-service/internal/usecases/mail"
	"github.com/aerosystems/mail-service/internal/usecases/mail/provider"
	"github.com/aerosystems/mail-service/pkg/logger"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	brevo := ProvideBrevoProvider(config)
	smtp := ProvideMailhogProvider(config)
	emailService := ProvideMailService(config, brevo, smtp)
	feedbackHandler := ProvideFeedbackHandler(baseHandler, emailService)
	server := ProvideHttpServer(logrusLogger, config, feedbackHandler)
	rpcServerServer := ProvideRpcServer(logrusLogger, emailService)
	app := ProvideApp(logrusLogger, config, server, rpcServerServer)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HttpServer.Server, rpcServer *RpcServer.Server) *App {
	app := NewApp(log, cfg, httpServer, rpcServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideHttpServer(log *logrus.Logger, cfg *config.Config, feedbackHandler *handlers.FeedbackHandler) *HttpServer.Server {
	server := HttpServer.NewServer(log, feedbackHandler)
	return server
}

func ProvideRpcServer(log *logrus.Logger, mailService RpcServer.MailService) *RpcServer.Server {
	server := RpcServer.NewServer(log, mailService)
	return server
}

// wire.go:

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideBaseHandler(log *logrus.Logger, cfg *config.Config) *handlers.BaseHandler {
	return handlers.NewBaseHandler(log, cfg.Mode)
}

func ProvideFeedbackHandler(baseHandler *handlers.BaseHandler, mailService handlers.MailService) *handlers.FeedbackHandler {
	return handlers.NewFeedbackHandler(baseHandler, mailService)
}

func ProvideMailhogProvider(cfg *config.Config) *provider.Smtp {
	return provider.NewSmtp(
		cfg.MailhogDomain,
		cfg.MailhogHost,
		cfg.MailhogPort,
		cfg.MailhogUsername,
		cfg.MailhogPassword,
		cfg.MailhogEncryption,
	)
}

func ProvideBrevoProvider(cfg *config.Config) *provider.Brevo {
	return provider.NewBrevo(cfg.BrevoApiKey)
}

func ProvideMailService(cfg *config.Config, brevo *provider.Brevo, mailhog *provider.Smtp) *mail.EmailService {
	provider2, err := mail.FromString(cfg.EmailProvider)
	if err != nil {
		panic(err)
	}
	switch provider2 {
	case mail.Mailhog:
		return mail.NewEmailService(mailhog)
	case mail.Brevo:
		return mail.NewEmailService(brevo)
	}
	panic("no email provider set")
}
